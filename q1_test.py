# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from metrics import *
import time

np.random.seed(45)

N = 30
P = 5
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))
print(X.shape)


#Evaluating sklearn's implementation of linear regression
LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(X,y)
y_hat = LR.predict(X)

print('For sklearn LinearRegression : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")


#Evaluating solution of linear regression using normal equations
LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_normal_equations(X,y)
y_hat = LR.predict(X)

print('For linear regression using normal equations : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")



#Evaluating solution of linear regression using SVD
LR = LinearRegression(fit_intercept=True)
LR.fit_SVD(X,y)
y_hat = LR.predict(X)

print('For linear regression using SVD : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print("---------------------------")


# Time each technique
start_time = time.time()
LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(X, y)
sklearn_LR_time = time.time() - start_time

start_time = time.time()
LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_normal_equations(X, y)
normal_eq_time = time.time() - start_time

start_time = time.time()
LR = LinearRegression(fit_intercept=True)
LR.fit_SVD(X, y)
SVD_time = time.time() - start_time

# Print time taken by each technique
print("Time taken by Sklearn's implementation: {} seconds".format(sklearn_LR_time))
print("Time taken by normal equations: {} seconds".format(normal_eq_time))
print("Time taken by SVD: {} seconds".format(SVD_time))
