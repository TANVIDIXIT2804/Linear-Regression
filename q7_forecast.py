# -*- coding: utf-8 -*-
"""Q7_forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QygJyzTuf4wJ3ioxCqF0boFIbPNbBJd6
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# load data
url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv'
df = pd.read_csv(url, header=0, parse_dates=[0], index_col=0, squeeze=True)

# create lagged dataset
values = pd.DataFrame(df.values)
dataframe = pd.concat([values.shift(1), values], axis=1)
dataframe.columns = ['t-1', 't']

# split into train and test sets
train_size = int(len(dataframe) * 0.8)
train, test = dataframe[1:train_size], dataframe[train_size:]

# prepare data
train_x, train_y = train['t-1'], train['t']
test_x, test_y = test['t-1'], test['t']
train_x, train_y = train_x.values.reshape(-1,1), train_y.values.reshape(-1,1)
test_x, test_y = test_x.values.reshape(-1,1), test_y.values.reshape(-1,1)

# fit linear regression model
model = LinearRegression()
model.fit(train_x, train_y)

# make predictions
train_pred = model.predict(train_x)
test_pred = model.predict(test_x)

# calculate RMSE
train_rmse = np.sqrt(mean_squared_error(train_y, train_pred))
test_rmse = np.sqrt(mean_squared_error(test_y, test_pred))
print('Train RMSE: %.3f' % train_rmse)
print('Test RMSE: %.3f' % test_rmse)

# plot results
# plt.plot(train_y)
# plt.plot(train_pred)
plt.plot(test_y)
plt.plot(test_pred)
plt.legend()
plt.show()

#TODO : Write here
