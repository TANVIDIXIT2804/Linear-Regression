# -*- coding: utf-8 -*-
"""Q4_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dUjXq9nEOX2PMOboEnFAB_-x-hQGM49x
"""

import numpy as np
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import pandas as pd
import os.path
from os import path
np.random.seed(45)  #Setting seed for reproducibility



x = np.array([i*np.pi/180 for i in range(60,300,2)])
y = 3*x + 8 + np.random.normal(0,3,len(x))

Y = pd.Series(y)
X = x.reshape(-1,1)
LR = LinearRegression(fit_intercept=False)
coeffs = []
degrees = []
for deg in range(1,7):
    poly = PolynomialFeatures(degree=deg, include_bias=True)
    x_new = np.array([poly.transform(X[0])])
    for i in range(1,len(X)):
        x_new=np.concatenate((x_new,np.array([poly.transform(X[i])])))
    x_new=pd.DataFrame(x_new)
    LR.fit_SVD(x_new, y)
    coeffs.append((np.linalg.norm(LR.coef_)))

    degrees.append(deg)
    
if not path.exists('Plots/Question4/'):
  os.makedirs('Plots/Question4/')

plt.plot(degrees, coeffs)
plt.xlabel('Degree')
plt.ylabel('Norm of Theta')
plt.savefig("Plots/Question5/theta_vs_deg.png")

#TODO : Write here
#Preprocess the input using the polynomial features
#Solve the resulting linear regression problem by calling any one of the 
#algorithms you have implemented.
