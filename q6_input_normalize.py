# -*- coding: utf-8 -*-
"""Q6_input_normalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f7kCUuDOHfftApIrWG1t-OUn2FVdaxeV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
# from linearRegression.linear_regression import LinearRegression
# from metrics import mse

np.random.seed(45)

X = np.random.rand(10, 3)
y = 2*X[:, 0] + 3*X[:, 1] + 4*X[:, 2] + np.random.randn(10)*0.1
# num_samples=30
# num_features=5
# noise_std=0.1
# X = np.random.rand(num_samples, num_features)
# y = np.random.rand(num_samples)

# X = np.random.rand(num_samples, num_features)
# true_coeffs = np.random.rand(num_features)
# y = np.dot(X, true_coeffs) + noise_std*np.random.randn(num_samples)


# fit the model with StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
y_scaled = scaler.fit_transform(y.reshape(-1, 1)).ravel()

# Initialize linear regression model
lr = LinearRegression()

# Fit model to unnormalized data
lr.fit_SVD(X, y)

# Predict on unnormalized data
y_pred_unnormalized = lr.predict(X)

mse_unnormalized = mean_squared_error(y, y_pred_unnormalized)
print(mse_unnormalized)

# Fit model to normalized data
lr.fit_SVD(X_scaled, y_scaled)

# Predict on normalized data
y_pred_normalized = lr.predict(X_scaled)

# Calculate mean squared error on normalized data
mse_normalized = mean_squared_error(y_scaled, y_pred_normalized)
print(mse_normalized)

# plot the errors
fig, ax = plt.subplots()
ax.plot(["Unscaled Data","Scaled Data"], [ mse_unnormalized,mse_normalized])
ax.set_ylabel("Mean Squared Error")
plt.show()
